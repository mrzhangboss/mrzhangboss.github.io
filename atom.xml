<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小伦子的笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mrzhangboss.github.io/"/>
  <updated>2021-04-02T14:29:12.163Z</updated>
  <id>https://mrzhangboss.github.io/</id>
  
  <author>
    <name>张伦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新工作两周总结</title>
    <link href="https://mrzhangboss.github.io/2021/04/02/summary/stage/2weekSummay/"/>
    <id>https://mrzhangboss.github.io/2021/04/02/summary/stage/2weekSummay/</id>
    <published>2021-04-02T13:44:55.000Z</published>
    <updated>2021-04-02T14:29:12.163Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一眨眼2周就过去了，在新的公司感触颇多</p></blockquote><h2 id="改变"><a href="#改变" class="headerlink" title="改变"></a>改变</h2><ul><li>工作流程</li></ul><p>新的公司比原来要大的多，业务也比之前要多的多，业务多之前在小公司都是一把梭，什么测试开发运维都是自己上，<br>但是这边没法全干，每个人都有自己的工作</p><p>这个带来一个好处就是你可以专心自己的业务，但是也带来一个坏处，就是想做一件事得协调很多个部门</p><p>而且当你想做一个大功能的时候就得开会了，这个也是我的一个很大的感受了吧，会议越来越多，之前半年才开一次会，现在一天就开两次</p><ul><li>部署流程</li></ul><p>之前由于一般都是个人负责一个大的项目，一般都是自己选择最方便的发布方式来部署应用，但是随着公司越来越大，你得考虑到<br>各种情况，所以这边采用了K8S + Dubbo 这种来部署分布式应用</p><p>底层还是普通的运行方式，但是采用了云原生镜像这种来隔离应用，以及对应用动态扩容，当然我们我们采用的是<br>云服务，基本上所有的组件都是云组件，理论上，我们是一个完全在云上的公司</p><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>目前公司是完全2C的公司，而且目前我负责的部分是主要是公共服务，所以其实整体业务并没有太多复杂性的东西，<br>但是2C最重要的一个问题就是，很在乎用户体验，应用的稳定性非常重要</p><p>经过两周的磨合，我对公司的架构有个大致的了解，但是涉及到的一些组件，大部分只是会使用，目前自己需要加强对组件<br>的了解，尽快上手业务，目前公司的自动化测试也存在不足（或者是没有），自己接下来的打算就是<br>尽快扩展自己的知识树，把用到微服务组件给钻透，而不是仅仅停留在会使用的阶段</p><p>这样第一个不会因为自己一些知识的欠缺而引起系统事故（听说P0事故就得背书包走人了哈哈），第二个也能让自己尽快<br>提升到下一个级别</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这两周自己在leader的建议下也尝试在使用UML来归纳总结自己的知识，目前只能说真香，但是的确得完全掌握透才能<br>完成整体架构的理解</p><p>目前自己新概念也已经背到22篇了，每天背完并默写还是有一定成就感的，其实刚入职这段时间自己一直有点焦急，首先<br>是因为，刚入职，害怕自己写着写着就背书包走人了，但是还好其实leader和同事都挺好的，</p><p>但是自己发现自己有的时候的确急了一点，总想把事情给赶完，太过急躁其实也不好，太过松散也不好，尽力而为，<br>才是最好</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一眨眼2周就过去了，在新的公司感触颇多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;改变&quot;&gt;&lt;a href=&quot;#改变&quot; class=&quot;headerlink&quot; title=&quot;改变&quot;&gt;&lt;/a&gt;改变&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;工作流程&lt;/li&gt;

      
    
    </summary>
    
      <category term="随想" scheme="https://mrzhangboss.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>Dubbo浅探</title>
    <link href="https://mrzhangboss.github.io/2021/03/27/java/dubbo/dubbo%E6%B5%85%E6%8E%A2/"/>
    <id>https://mrzhangboss.github.io/2021/03/27/java/dubbo/dubbo浅探/</id>
    <published>2021-03-27T13:27:53.000Z</published>
    <updated>2021-03-28T08:17:45.558Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>繁忙的一周终于过去了，加入小影第一周主要是熟悉后端架构，同事们都挺好，自己的基础还是有点弱，前段时间简单的把Spring<br>Cloud 和 Dubbo学习了一下，但是其实对于工作来说，之前学的都是最新的版本，但是其实公司用的版本很老了，所以需要时间去学习老版本</p></blockquote><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>首先我们来看看Dubbo的历史，看Dubbo的历史的时候我们得先看看<a href="https://www.jianshu.com/p/cad51a09d0c2" title="Dubbo发展史" target="_blank" rel="noopener">Spring的历史</a>,2004年就出来了Spring1.0，随着<br>一些网站越做越大，例如淘宝，随着用户量越来越大，单一Spring无法支持他们的体量，<br>所以淘宝基于Spring开发了Dubbo这个架构</p><p>Dubbo和Spring有什么不同，Dubbo其实是基于Spring开发的，只不过他和普通的Spring程序不一样，它提供的是<br>分布式服务框架</p><p>原来的Spring程序放进Tomcat里面就可以跑了，但是Dubbo是将一堆Spring程序组合起来做一个分布式系统，<br>他提供了什么呢，总结起来就是Spring程序的互识和通信</p><p><img src="/images/dubbo-struct.png" alt="Dubbo架构图"></p><p>Dubbo使用起来非常简单，复杂的注册和监控已经帮你写了，你只要启动提供者（Provider）和消费者（Consumer）实例就好了</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>其实仔细看看整个架构，什么是提供者和消费者，之前我们写web，很简单一个url对应一个接口</p><p>但是想想随着公司越来越大，小公司用户量不大直接发布新代码上线就好了，大公司需要24小时提供服务，所以Dubbo首先<br>做的就是将后端分层，逻辑需要经常变动的给独立开来，我们把原来的接口分成两个一个是提供者和一个是消费者</p><p>提供者负责承担真正的代码逻辑，消费者只是提供调用的接口，这样每次代码上线的时候，只需要把新提供者注册进注册中心，<br>然后把老提供者下线，这样就无感知的将新版本替换成老版本了</p><h2 id="微服务区别"><a href="#微服务区别" class="headerlink" title="微服务区别"></a>微服务区别</h2><p>随着Spring Cloud从2016年的兴起，微服务的风潮开始兴起，那么Dubbo和Spring Cloud有什么不同呢，首先<br>Dubbo和Spring Cloud的设计理念是不一样的</p><p>首先Dubbo它想做的是一个Rpc框架，它提供Spring 消费者和提供者之间的通信，借此打造分布式集群，而<br>Spring Cloud做的是一种切分，它将系统切分成每个小的服务，每个服务负责的部分都不一样</p><p>简单来说就是，Spring Cloud提供的积木，你可以自己组装一个系统，它也不关心你用不用什么组件，单独来看，<br>每个Spring Cloud服务都是一个网站，他们之间用HTTP进行通信</p><p>Dubbo呢，考虑的更多是各个服务之间高效的通信，你可以理解为Dubbo是做一层网络中间件，这给他自己带来了一定的限制<br>而Spring Cloud本质上还是一个个网站，所以你可以很容易在里面搭建配置中心，网关，服务跟踪等等</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Dubbo出生在2011年，那个时候云服务还没有兴起，网络流量还很贵，Spring Cloud出生在2016年，正是云、Docker、K8S这些组件的大热的时候，<br>大家发现在一个系统中流量是最不值钱的，反而一个系统更加灵活更加好调试才更符合</p><p>但是很多老系统都在使用Dubbo作为系统架构， 所以阿里推出了Spring Cloud Alibaba，即可以兼容原来的Dubbo系统，也可以很轻松将原来的Dubbo架构<br>迁移到Spring Cloud的架构</p><p>##　资料</p><p><a href="https://www.jianshu.com/p/cad51a09d0c2" title="Dubbo发展史" target="_blank" rel="noopener">Spring的历史</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;繁忙的一周终于过去了，加入小影第一周主要是熟悉后端架构，同事们都挺好，自己的基础还是有点弱，前段时间简单的把Spring&lt;br&gt;Cloud 和 Dubbo学习了一下，但是其实对于工作来说，之前学的都是最新的版本，但是其实公司用的版本很老了，所以需要
      
    
    </summary>
    
      <category term="Java" scheme="https://mrzhangboss.github.io/categories/Java/"/>
    
    
      <category term="SpringCloud  Dobbo" scheme="https://mrzhangboss.github.io/tags/SpringCloud-Dobbo/"/>
    
  </entry>
  
  <entry>
    <title>人生浅思</title>
    <link href="https://mrzhangboss.github.io/2021/03/27/secret/%E4%BA%BA%E7%94%9F%E6%B5%85%E6%80%9D/"/>
    <id>https://mrzhangboss.github.io/2021/03/27/secret/人生浅思/</id>
    <published>2021-03-27T13:25:03.000Z</published>
    <updated>2021-03-28T02:31:53.177Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="72e89f2c84578a62f7f4d0614eda425cb6057f9285508b5a84f1060f8dbc4c89">4f2ee425f9beb83069b565b3c5ad5cc44f766a90c472399a0616d746a9b183d0467c4f2cdeba5e270614a1527105157260efe7ad69161c35cf1dd1817cf437b2d28801d94005eca39ada0b32c97d37ae3c68b1e9d4c0c5aff2ddf8835314231296ee092f38e57383265a362ed1f652a92f9c935f1b9aec0f69ec5bd044661a163094ae81cccf0528e715ea110bee71a19ac8ed0a1840a78a7d513bcc1cbd8a10c21db1895d15086c918ae92d97171dc5c1a76f8915447d8ba95263bc4135012627a9e1a2e597e94757342ef2b363bb7b4802e03739fb6a86aa1e988e62198adcccb9474c08dd230071e4f665c88a87426d807453c21c5562edee6d8237d65d10bc869aa242dd0275e986c289fb4b53720c9412d79e81ae63cd28a313ffdfc314c11c21d419da1c756422995d0c87bc74991ee474f5115cb8920095b8b74aab0c1ef1b1dabf869859c9be8b1b368c7421e94a9fdc96dcd1e2bb208f57f3b873053e968998c4b6b74363f41a7b0146afb0c96a67425e3554a5f6c3a4872ad77672fc41dfa3c1e9a2f796618d087c09611389ac6c8ac50a220acd14b932d347d8c9e66f724e7a6208f902423d0d553f07546c922716eb012999e1dd6246ba1f34bb9ed455ff4e431ea82ffcd644f65fbc3f3b80991181067e101660b137641c86c5c45fc52b7a1c34eb8ba825b5a215c2583ce64a8c597390baf27233b41beb2afc0f1249a8b422079a7cb55e1ec24fa713044a15ef7ae856e11fda7335fd46d10796c87509058cd32be074fbc70a8e7ca6c86507a0b331df7470be0246316245d9bcb88472d36131545a050c389c3c2330028ff72f791b6b61ebd09b3e166827896c0b977b033300f191e253b616a9f6e0f81fe076472f040f1dfbb7a79381d7ffcd7c2b9d6844e045a63cf4b64586597bf0c85e2fc1346dd4b4c598c4ac864ea11b2289c323a915565e55873d46f1e6d887a338e55a631db25c6e129678e30aa7953cc9d8a976cda50fac47e988b03267143fa1e4073832a71f4ef2aaf0d2f9428fea3a59a23e3bf5c9b95f28e397d062009b89db254fb12dd6285651b1a0468d1ead0925e8df756a0b417f3b3142475a8cbd53831dd81a9ddaa61b8c4d9b223566813e54514a5cc3525d24a9870f5641e2c8e31fab6c009f24417864bb2bc6a998f1db9ca98cd063dd64728e479da077be45e0d609a948657503851f1d93125d37978381c6ebc5cba8e0f154831b44d43a49ef313ce2653b3a308ec4fa7c22ae4dc175c87d5d35a52395c0aade8a4557048bfd4454ff44ffc8240d32f2ec57217f55d076693f3995dded656427f692ec77383288592de394e18ee4c1839658172188f155c5b00a292318fc1be37b83c9cae08d9c01a8ec330ab37f8bf77f558af5d593672d960f7bcf0b0be7b2d6788ada6fb22d6c908e56013dab63436ab35b61bea40726e9c9548a3586c11a340f9d9d6d3fdfae786fb0a1b0bb2c7e45219eb2f5ef43c1f0273dba61750c6be480989ee8a22d1e35ffc1aeea888b43069393e37f688a5cda246d623680b33bac0a10406ece1e14a215b2ff76a6166b6423ed89db3e6fc893ded03b37758c672da8774075af129c4c90621f629f8446ba76d6744adaad6cbc31be7040f9bfca6bde8d8c73b97275e77071640457151ac6faf3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这里有东西被加密了，需要输入密码查看哦。
    
    </summary>
    
    
      <category term="secret" scheme="https://mrzhangboss.github.io/tags/secret/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba浅探</title>
    <link href="https://mrzhangboss.github.io/2021/03/16/java/springcloud/springcloudalibaba%E6%B5%85%E6%8E%A2/"/>
    <id>https://mrzhangboss.github.io/2021/03/16/java/springcloud/springcloudalibaba浅探/</id>
    <published>2021-03-16T12:05:53.000Z</published>
    <updated>2021-03-16T12:43:29.814Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>花了半天时间把Spring Cloud Alibaba 的<code>Nacos</code> 、 <code>Sentinel</code> 和 <code>Seata</code>简单的使用了一下，下面是我的一些看法</p></blockquote><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><p>Nacos 干了三件事，第一个就是把服务注册的活给揽过来了，第二个就是把配置中心的活给揽过来了，而且由于他是要监控各个服务的心跳的，<br>所以他顺便把配置同步这个活也给抢过来了</p><p>Nacos做了很多事，美中不足的地方是，Nacos更希望你在网页上进行配置（当然可以通过url），比如说Spring Cloud Config 是希望你更新源代码然后再来将配置给更新 掉</p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p>Sentinel是一个流量控制的中间件，作用和Hystrix差不多，不过，相比于Hystrix，Sentinel提供了一个web界面来<br>帮助你定制限流规则，主要是保护后端</p><p>这些规则其实也很简单，多尝试一下就好了，我其实很好奇，Sentinel在其中做的工作是什么，他是如何保证异常流量不<br>把自己给打爆的，当然负载均衡可以一定量的缓解这些</p><h2 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h2><p>这个号称实现了分布式事务的软件，我没搭起来，尝试几个小时无果后，而且网上的资料也异常的少，甚至他们官方写的demo我也跑不起来<br>我看他们的start虽然多，但是issue也多，每个版本都有坑</p><p>我也尝试去搜索有没有大公司尝试使用这个分布式事务，很遗憾没找到，首先限死了用MySQL，而且非常恶心的事每个数据库上面都得创建一个<code>undo</code>表</p><p>我可以理解你在一个数据库上记录这些东西，但是我没法理解你要所有的数据库都建这么个表</p><p>而且非常坑的事，官网SSL证书当天正好到期，在我看了引用了这么个分布式事务，第一肯定涉及到了很多锁，我看原理介绍上<br>也说了开始事务前会上锁，对于现在通用解决方案都是消息队列来处理这个东西的,引入分布式锁并发不高，而且万一锁表凉凉了</p><p>所以我就去找有没有什么大公司实践过了，可是很遗憾好像没有，也没没看到有什么性能测试，而且部署半天报各种问题，每个版本都不一样，怕是个PPT项目<br>还是改天有空的时候在研究研究</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实Spring Cloud Alibaba比较重要的一个部分就是将Dubbo集合到了Spring Cloud，所以我接下来的时间得好好看看Dubbo了，目前Spring Cloud这些组件只能说都上手摸了一会<br>要想真正的成长还得去实际项目考验</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;花了半天时间把Spring Cloud Alibaba 的&lt;code&gt;Nacos&lt;/code&gt; 、 &lt;code&gt;Sentinel&lt;/code&gt; 和 &lt;code&gt;Seata&lt;/code&gt;简单的使用了一下，下面是我的一些看法&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
      <category term="Java" scheme="https://mrzhangboss.github.io/categories/Java/"/>
    
    
      <category term="SpringCloud SpringCloudAlibaba" scheme="https://mrzhangboss.github.io/tags/SpringCloud-SpringCloudAlibaba/"/>
    
  </entry>
  
  <entry>
    <title>UML最佳实践</title>
    <link href="https://mrzhangboss.github.io/2021/03/15/software/UML%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://mrzhangboss.github.io/2021/03/15/software/UML最佳实践/</id>
    <published>2021-03-15T11:02:08.000Z</published>
    <updated>2021-03-16T12:45:48.003Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近面试的时候一个面试官指出了我对系统架构没有固定的认知，推荐我去好好学习一下UML这个语言，我花了几个小时在B站上看了<a href="https://www.bilibili.com/video/BV1LE411T75W" target="_blank" rel="noopener">UML</a>这门课，下面是我对UML最佳实践的一点心得</p></blockquote><h2 id="UML是什么"><a href="#UML是什么" class="headerlink" title="UML是什么"></a>UML是什么</h2><p>首先它是一门语言，全名叫 Unified Modeling Language，翻译过来就是统一建模语言，首先为什么我们思考一下为什么我们需要这么一门语言。</p><p>最开始的C语言是面对过程的，我们想做一个什么东西，直接去写就好了，等我们到了比如Java这些面对对象的语言的时候，我们就要思考怎么去建模，所以UML就是在这种情况被创建出来的</p><h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><p>首先UML主要帮助我们设计一个系统，那一般的流程是什么呢</p><ol><li>确定用例 -&gt; 用例图</li><li>确定类模型 -&gt; 类图</li><li>确定流程 -&gt; 时序图</li><li>确定细节 -&gt; 状态图</li></ol><h2 id="软件选择"><a href="#软件选择" class="headerlink" title="软件选择"></a>软件选择</h2><p>其实UML很核心的一个地方就是用可视化的图表展示出你的系统架构，视频里面使用的<strong>IBM Rational Rose</strong>这个软件，的确拖拽非常方便，但是有个问题就是只支持<code>window</code>，目前我主要操作系统是Ubuntu和Mac，所以我需要一个跨平台的软件</p><p>我尝试了跨平台的<code>dia</code>，或者目前一些主流的在网页上拖拽的软件来完成UML图，但是这些都有一个痛点，不方便管理，而且修改起来也比较麻烦，然后有人推荐使用<a href="https://plantuml.com/zh/state-diagram" target="_blank" rel="noopener">plantuml</a>，不但跨平台，而且UML图是根据代码自动生成</p><p>也就是说你不需要拖拽，你可以像写代码一样画UML图，更主要的是这个IDEA上面都有插件集成，你只要安装好插件就可以在IDE里面写UML代码生成你想要的图了</p><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>首先在插件库查找<code>plantuml intergration</code>，然后点击安装，接下面安装绘图课</p><p>Mac</p><p>brew install graphviz</p><p>Ubuntu</p><p>sudo apt-get install -y graphviz</p><p>接下来你重启IDEA然后随便新建一个文件，输入下面代码</p><p>@startuml<br>Alice -&gt; Bob: test<br>@enduml</p><p>点开侧边栏PlantUML就能看到生成的UML图了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以前我只知道IDEA能写代码，后面我知道IDEA能执行SQL，我就把他当成SQL管理工具，后面我发现他也能写Markdown，我就放弃的专业markdown软件，如今我发现他也能写UML，IDEA真的太全能了</p><p>PS：这篇博客简单的介绍了我对UML最佳实践的配合，没有涉及到<code>PlantUML</code>的具体使用方法，可以看我的使用<a href="https://github.com/mrzhangboss/plantuml-introduction" target="_blank" rel="noopener">UML实现</a></p><p><a href="https://github.com/mrzhangboss/plantuml-introduction" target="_blank" rel="noopener">UML实现Github链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近面试的时候一个面试官指出了我对系统架构没有固定的认知，推荐我去好好学习一下UML这个语言，我花了几个小时在B站上看了&lt;a href=&quot;https://www.bilibili.com/video/BV1LE411T75W&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="软件" scheme="https://mrzhangboss.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud浅析</title>
    <link href="https://mrzhangboss.github.io/2021/03/14/java/springcloud/springcloud%E6%B5%85%E6%9E%90/"/>
    <id>https://mrzhangboss.github.io/2021/03/14/java/springcloud/springcloud浅析/</id>
    <published>2021-03-14T00:38:19.000Z</published>
    <updated>2021-03-14T02:16:12.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在学SpringCloud，之前一直对用视频学嗤之以鼻，觉得只有弱者才会这样，但是其实对于一些已经非常常见的技术<br>比如SpringCloud这种，已经出来很长一段时间了，而且其实非常杂，用视频学起来其实非常快，当然前提是你要三倍速播放，而且<br>你得把视频配套的代码找到，这样你就能很快的掌握这个。</p></blockquote><p>我把SpringCloud视频过了一遍，代码也运行了一遍花的时间可能不超过<br>5个小时吧，假如自己按照原来的做法去看别人博客然后自己慢慢搭建可能入门花的时间远远不止</p><p>下面是我学习SpringCloud用到的视频已经代码，推荐你视频三倍速播放，把视频看懂之后去实际运行一下相应代码，这样你能很轻松知道这个东西是什么</p><ul><li><a href="https://github.com/zzyybs/atguigu_spirngcloud2020" target="_blank" rel="noopener">代码</a></li><li><a href="https://www.bilibili.com/video/BV18E411x7eT?p=1" target="_blank" rel="noopener">B站视频</a></li></ul><p>目前我就总结一下我入门Spring Cloud的一些心得</p><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>其实微服务这个东西是模块化的一种体现，在企业开发中你会发现，好多时候我们要做一个网站如果要暴露在外网地址，<br>其实最基础就得要有一个登录，每个网站写一个登录其实非常没有必要</p><p>第一个是安全，第二个是耦合，假如你想完全独立于其他系统，你必须重新使用数据库存储，这样用户在同一家公司可能得注册两个不同的账号</p><p>所以微服务的理念就是模块化，把登录和其他业务给组装成不同模块，这样你就专注于你自己的业务而不用去担心其他的问题了</p><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>微服务一开始也很简单，就是单独起不同的网站，比如我们把登录单独部署在一个网站上面去，<br>登录完了就给一个<code>token</code>， 然后其他系统使用<code>token</code>来验证用户权限</p><p>刚开始这样很简单，但是对于系统来说，出现了一个问题，首先是用户登录次数很少（如果他不退出登录），然而其他业务<br>使用的很多，这时候我们就想多起个实例来跑其他微服务，但是我们之前写死了，所有的业务调用都只是跳转到一个<br>网址上去了</p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>所以我们就想到做一个调度中心来把所有的服务都注册在这里，这样你想要的时候过来查就好了，这个服务中心就是我们所说的<br>服务注册，就是他来监控所有服务实例的，每个实例都得定时发送心跳，如果一段时间没有发送就会默认认为服务下线了</p><p>对于服务注册中心来说，其实就是一个登记的作用，就是记录一个服务名，以及他们的实际IP地址</p><h2 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h2><p>服务注册核心在于注册，对于真正的调用方来说，他只能从注册中心拿到最新存活的实例的IP，实际上他还得去通过这个IP来远程调用实际服务</p><p>所以Spring Cloud就创建了两个调用框架，第一个用来选择选择哪个实例，比如随机选择一个实例，还是说按照实例响应速度等等来选择</p><p>这个其实是一个拦截器，他只是帮你在远程调用之前选择哪个服务</p><p>第二个就是<code>OpenFeign</code>，其实这个相当于把远程调用伪装成为一个<code>Service</code>，你只要把这个<code>Service</code>名字以及相关配置给配置好就可以像普通<br><code>Service</code>一样调用了</p><p>服务调用，这个本质上是给调用方写的HTTP请求库，对于被调用者来说其实什么没有影响</p><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>其实服务降级，我认为说成异常处理更好，对于微服务来说，最大的区别就是原来一个网站，现在好多网站，我以前实现一个功能</p><p>一个接口就好了，目前可能需调用很多很多接口，这个调用一多就会出问题，第一个时间变长了，<code>HTTP</code>请求其实很有冷启动的缺点的，随着你的调用越来越多<br>其实花在建立链接的时间也越来越多了，而且<code>HTTP</code>其实非常啰嗦，有很多不需要的头部信息，会重复的发来发去</p><p>回到刚才的问题，就是我们调用方最终要实现一个功能的时候，可能得需要很多步骤，假如正常来写，我们得写很多<code>try catch</code><br>我们得考虑这个接口调用失败怎么办，我们得返回什么东西</p><p><code>Hystrix</code>就是一套异常处理框架，他能帮你把接口给管理起来，在调用前他会检查这个接口是否已经熔断，在调用的时候他会检查是否<br>会抛异常，如果抛异常就调用其他兜底的方法</p><h2 id="辅助"><a href="#辅助" class="headerlink" title="辅助"></a>辅助</h2><blockquote><p>网关</p></blockquote><p>Spring Cloud还给了我们一些其他可以选择使用的辅助功能，比如假如你想自己做一层网关，那可以使用<code>gateway</code>做一个网关，<br>网关能帮我们做一下杂碎但是非常重要的，比如说权限认证，异常流量过滤啊，日志记录啊</p><p>你可以用<code>Nginx</code>来做这些，但是<code>gateway</code>这些网关是用<code>Java</code>写的，你很容易就可以进行扩展实现你自己想要的功能</p><blockquote><p>配置中心</p></blockquote><p>对于一个大的公司来说，代码运行的环境非常多，所以<code>Spring Cloud</code>提出配置中心的概念，你可以让所有的应用接入配置中心<br>这样当你想临时关闭某些东西的时候，只要修改配置中心，所有的实例都能立刻得到响应，而不需要重启</p><blockquote><p>调用链监控</p></blockquote><p>这个有点调试工具了，就是在调用方和被调用方都安上这个就能很轻松的把整个调用的线给记录下来，第一个方便你监控异常，<br>第二就是运维也能根据这个及时添加更多实例来面对突发流量</p><blockquote><p>Spring Cloud Stream</p></blockquote><p>其实我感觉这个东西设计的挺失败的，本来想法是把所有的消息队列框架都能用一个框架去调用，但是目前其实只支持两个，那其实我用原生的也没有什么太大的影响，原生的Spring Boot就支持<code>RabbitMQ</code>等这些所有的消息队列分发和消费</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>微服务架构其实就是将大web系统给模块话，其实本质上每个小的服务还是一个<code>Spring Boot</code>网站</p><p>这个给系统解耦合的同时也带来一个问题，如果去保证一个复杂多模块的安全稳定的运行以及更新，这个也是后面需要去解决的问题</p><p>其实<code>Spring Cloud</code>引进了微服务架构，也引进了一些其他问题，比如说发起服务调用的消耗，以及多系统日志收集等等一系列问题<br>接下来就是对<code>Spring Cloud Alibaba</code>的学习，看看<code>Spring Cloud Alibaba</code>在Spring Cloud的基础上做了什么优化</p><blockquote><p>当然在快速过了一遍实验代码和视频之后我也有一些疑惑，等我把<code>Spring Cloud Alibaba</code>过了之后就得解决下面问题</p></blockquote><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol><li>服务注册中心能否添加报警功能，假如服务实例低于某个值</li><li>批量启动所有服务的最佳实践是什么，一般企业是怎么做的</li><li>Spring Boot如何实现只添加一个依赖来插入自己想要的插件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在学SpringCloud，之前一直对用视频学嗤之以鼻，觉得只有弱者才会这样，但是其实对于一些已经非常常见的技术&lt;br&gt;比如SpringCloud这种，已经出来很长一段时间了，而且其实非常杂，用视频学起来其实非常快，当然前提是你要三倍速播放，而
      
    
    </summary>
    
      <category term="Java" scheme="https://mrzhangboss.github.io/categories/Java/"/>
    
    
      <category term="SpringCloud" scheme="https://mrzhangboss.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>未来一年规划</title>
    <link href="https://mrzhangboss.github.io/2021/03/09/summary/%E6%9C%AA%E6%9D%A5%E4%B8%80%E5%B9%B4%E8%A7%84%E5%88%92/"/>
    <id>https://mrzhangboss.github.io/2021/03/09/summary/未来一年规划/</id>
    <published>2021-03-09T12:17:31.000Z</published>
    <updated>2021-03-09T12:18:36.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在上一篇博客上我写了我关于未来规划的计划，接下来这篇博客就好好介绍一下怎么做规划</p></blockquote><h2 id="长期目标"><a href="#长期目标" class="headerlink" title="长期目标"></a>长期目标</h2><p>首先一个长期目标很好找到，比如成为某个方向技术专家，首先我想到的是要把我的英语能力提上去，那么很简单就是成为一个英语高手。</p><p>这个长期目标有了，接下来我们要思考我们如何来做到这一点。我们中期目标很简单就是能流利的说，流利的写。因为我前面有经验，要想达到这个就是大量的背诵，大量的默写（当然我后面主要是敲代码为主，可以通过打字的方式默写）。所以我的短期目标就很简单，就是将新概念2、 3 、4给全部背诵并默写出来。这个方法虽然有的傻，但是很扎实，唯一的缺点就是我的读音可能不那么native。但是我的目标主要是阅读与写作能力，开口能力够用就行，其实大部分外国人能接受咖喱味的英语也能接受中国式英语</p><p>我第二个长期目标就是成为某个技术领域专家，上面的英语阅读与写作能力也是为了这个服务的，因为英语比较重要，现在主流软件全部是英语写的。</p><p>其实我这个东西很早就在我的目标当中，但是我太贪婪了，学东西的时候没有把力往一处使，导致学着学着就偏航了。人的精力是有限的，如果不专注，那么很难成为一个方向的专家。</p><p>要想成为一个专家，首先你就得看看专家怎么做的。我的目标很简单就是成为后端领域专家，首先我去一下技术行业里面的专家的博客上去看，看人家博客怎么写的，最下面是我找到的三个技术博客</p><h2 id="如何成为技术专家"><a href="#如何成为技术专家" class="headerlink" title="如何成为技术专家"></a>如何成为技术专家</h2><p>专家博客给我的第一印象是他们的体系非常的健全，而且非常重要的一个地方他们博客文章的最多一定是就是他们擅长的方向</p><p>比如说Java方向或者Spring这些文章一定是写的最多的，而且你去看人家的主方向内的内容，体系非常健全，基本上把这个体系上所有的知识点都囊括了。我在看人家的知识罗列的时候发现，自己和专家的差距就在这一点上，很多知识点我都没有涉及过。当你点击其中详细的内容的时候，你会发现其实人家写的非常简单明了，其实你自己把知识点给掌握之后也能写的出来。</p><p>所以成为一个技术专家也很简单，也是“背”，但是没有人给你背书的目录，你得自己写一本书。而且技术这个东西与时俱进，我发现这些十几年的技术专家还在更新他们主力技能的文章，所以成为一个技术专家必须有两点</p><ul><li>健全的知识架构</li><li>不断学习的能力</li></ul><p>现在说回我吧，其实我以前对博客的态度，很多时候只是为了写而写。我只是为了“炫耀”我懂的一些知识点。我从来没想过要把这些点连成一条线。</p><p>其实自己的博客要把他当做自己的一个浓缩知识树，你必须主动去维护他、更新它。之前我的博客就像一粒一粒种子，我把他们种下就不管了，如果你给他浇水，努力的把你的这些树苗养成一颗颗大树，总有一天你能看到一片茂密的森林</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以在写完博客之前，我干了一件事，就是重新把我的博客更新了一遍，首先做了几个改变的地方，第一个就是将hexo样式换成Next，第二个就是开放了评论以及阅读量，当然我也开通了打赏，大家如果觉得我写的东西能对你有帮助的话，那就请我喝杯奶茶。</p><p>当然这次改版我觉得最重要的一个地方就是，我重新把我的博客文章体系重新分了类，而且我自己也开始使用IDE来管理我的文章，我其实推荐大家学会在目录上就把你的文章进行分类，这样你能很快速的找到你想要的文章，也能在目录上对你知识树进行分类，尤其是像我已经写了近百篇博客。</p><p>前路漫漫，诸君加油！！！</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="http://www.ityouknow.com/java.html" target="_blank" rel="noopener">http://www.ityouknow.com/java.html</a></p><p><a href="https://bugstack.cn/" target="_blank" rel="noopener">https://bugstack.cn/</a></p><p><a href="https://www.javaboy.org/" target="_blank" rel="noopener">https://www.javaboy.org/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在上一篇博客上我写了我关于未来规划的计划，接下来这篇博客就好好介绍一下怎么做规划&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;长期目标&quot;&gt;&lt;a href=&quot;#长期目标&quot; class=&quot;headerlink&quot; title=&quot;长期目标&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="随想" scheme="https://mrzhangboss.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>面试杂思</title>
    <link href="https://mrzhangboss.github.io/2021/03/07/summary/%E9%9D%A2%E8%AF%95%E6%9D%82%E6%80%9D/"/>
    <id>https://mrzhangboss.github.io/2021/03/07/summary/面试杂思/</id>
    <published>2021-03-06T16:11:16.000Z</published>
    <updated>2021-03-09T12:15:01.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在面试，面试之前总觉得有一丝焦虑</p></blockquote><p>我不知道这丝焦虑是不是学生时代带给我的，对于我来说，这种焦虑是害怕自己不知道这个知识点而很囧。或者对于我来说，我自己一直对自己不够自信。为什么呢，因为对于我来说，我自己一直在干的很杂，相比于其他人来说，我算是一个真“全干”工程师</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>我在思考为什么会这样，我觉得第一点很重要的是我缺乏一个明确的<strong>职业规划</strong></p><p>之所以我会变成“全干”工程师，是因为我一直在“瞎”折腾。为什么会这样，主要是因为好奇心，每个人都有好奇心，区别在于有些人好奇心强非得把这个东西搞懂然后再放手，有些人好奇心弱一会就结束了。相比而来，我是一个好奇心非常重的人</p><p>我觉得这种好奇心可能是在我上小学的时候就养成了。为什么这么说，你能想到一个十二岁左右小屁孩捧着一本右脑记忆的书，把圆周率后面五百位完整的记下来，还能完整的记忆一副扑克吗。</p><p>现在这种右脑记忆培训班在中国现在也挺流行的，但是在十几年前，图书馆里面只有几本这样的书。我觉得这是我第一次开始折腾吧，虽然最终我没能应用在我的学习上（因为我读的理科）。但是这段经历现在回头看还是得给自己竖个大拇指，现在十几岁的小孩只知道玩手机，看电视，玩游戏。当年的我在没人教导的情况下，自己去钻研学习记忆方法，而且直到我上高三，六年时间内我都没有放弃。我高三的时候用它来背古诗，读一遍就背出来，可惜背诵高考只占8分，最终也没能派上啥用场。</p><p>我人生中第二个折腾就是在高一的时候，我不记得我是听老师推荐还是自己在网上搜怎么学好英语，反正那个时候是新概念英语比较火，那个时候不知道是李阳还是谁鼓吹着学好英语就是听和背，大量重复的听和读，等你读到几百遍的时候你就自然而然的背下来了，我那个时候在睡觉的时候都听着新概念的英语文章，就是重复的听一篇文章还是每天重复的读，当你自然而然的背下来的时候就换下一篇文章背。我记得我当初买的新概念英语三，用这个方法背了大概20篇，有点后悔当初没有继续背下去，如果把新概念3和4全本背完，现在英语应该流利到丝滑境界吧。</p><p>当然现在捡起来其实也可以，其实自己毕业后也一直在背单词，但是其实效果也不是很明显。现在看来，自己现在会不满意自己的现状也是有原因的，自己会放弃一些好的习惯。</p><p>其实写之前自己也没意识到自己放弃了什么，因为人无时无刻不在做选择，当初放弃的原因是没有看到效果，相比于虎头虎脑的背，还不如多刷几道题（最终我高考英语考了130分），从分数上看我是挣了的，但是从长远的角度上来看，我是亏了的，我只是拿到了分数，然而那种方法能给我带来一种更长远的回报，好比短期投资和长期投资。长期投资最让人恐慌的是很难在短期内看到效果，必须要有一种信念让你坚持下去。</p><p>所以其实对于我来说，目前我就需要的是一种坚定的信念，首先我得明确自己的规划，然后把这些规划慢慢给他落实掉。</p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>其实回头看看，从大学开始到现在七年时间自己一共尝试了五个方向，按照时间排序</p><ul><li>后端</li><li>机器学习</li><li>爬虫</li><li>数据分析</li><li>大数据</li></ul><p>每个方向其实自己都钻研成中级和高级之间的实力，等我走完这一个圈后，我发现我更喜欢做后端，我突然发现我好像走了一个圈，最后又回到了原点。有时候在想，好像自己真的在浪费时间，假如自己一直在自己喜欢的圈子里努力，那么自己的实力目前也不会之停留在中级和高级之间了。</p><p>但是回头一想，其实自己也不去尝试怎么知道自己最后喜欢的是什么，没有谁天生就喜欢某一行，放牛郎的孩子没办法一辈子只能放牛，作为新一代的人，我很幸运的生活在这个互联网时代，我可以选择自己喜欢做的事，其实我也很感激毕业后呆的这家公司，虽然待遇上比不上大部分互联网人。但是在这里我没有压力没有开会，每天都在思考怎么学，怎么用。</p><p>这几年就像交了5个朋友，每个朋友关系都不是很亲密，所以我会感到“孤独”，感到焦虑。</p><p>要打破这个也很简单，选择自己真正想交的朋友做真心朋友，这样能解决你的焦虑和孤独</p><p>其实有时候觉得做技术必须学点心理学和经济学。为什么呢。因为做到最后你会发现，99.99%的问题都能通过时间来解决，我们每天都在做选择，这个选择是有代价的，其中最大的代价就是时间，所以如何把人生价值最大化，最重要的就是规划好你的时间</p><p>从大的层次上来讲，你要给自己做一个长期规划，这个一般是以年来做计划，第二个就是中期规划，这个一般以月来做单位，还有一个就是短期的，一般是以天来。</p><h2 id="术和道"><a href="#术和道" class="headerlink" title="术和道"></a>术和道</h2><p>其实上面讲的做规划很早之前自己就了解过，但是之前没有意识到这个重要性，年轻的时候不珍惜时间，对于任何问题不管是三七二十一搞定再说，所以以前会通宵解决一下很小的bug。虽然成就感很高，但是其实从后面角度上来看，得不偿失。</p><p>我不是说你碰到bug就放弃，而是你要去想自己为什么会碰到通宵才能解决的bug。自己的规划是不是出了问题，是自己哪个地方能力有欠缺。是debug能力，还是编程能力不足，或者没有熟悉某些工具帮助自己快速定位等等。</p><p>其实我自己也在开始尝试实践这种方法，我第一次了解是在知乎上看到一个硬件工程师在分享自己在家办公如何让自己有效的工作12个小时，然后我自己开始用Microsoft的TODO来帮助我自己实践这个。</p><p>下面是我这些天实践的心得：</p><ol><li>规划是非常严肃，你不能抱着一个完成任务的心态去制定它，你要首先把自己想做的事列出来，然后你得给他排序，对于很重要的事是必须要完成的</li><li>规划完成之后会有一种成就感，对于你历史规划，你也可以定时复盘，看看自己哪些地方可以做到更好</li><li>长期规划非常有必要，你可以每天开始规划之前，或者完成了当天规划之后再思考是否长期规划得做适当的调整，比如加快某项，或者你觉得某项还有更多细节需要深追</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我觉得最重要一点就是复盘吧，你把每天自己完成的TODO，以及这个TODO对你长期规划的影响在脑海里面思考计量，这样你才能以最快速度的接近你的目标。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近在面试，面试之前总觉得有一丝焦虑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我不知道这丝焦虑是不是学生时代带给我的，对于我来说，这种焦虑是害怕自己不知道这个知识点而很囧。或者对于我来说，我自己一直对自己不够自信。为什么呢，因为对于我来说，我自己
      
    
    </summary>
    
      <category term="随想" scheme="https://mrzhangboss.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>浅析Spring</title>
    <link href="https://mrzhangboss.github.io/2021/01/07/java/springboot/%E6%B5%85%E6%9E%90Spring/"/>
    <id>https://mrzhangboss.github.io/2021/01/07/java/springboot/浅析Spring/</id>
    <published>2021-01-06T16:00:00.000Z</published>
    <updated>2021-03-09T12:10:03.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Spring核心就是IoC（依赖注入）AoP（面向切面）本篇就基于一个开源项目 tiny-spring 来分析Spring框架到底给我们提供了什么东西</p></blockquote><p>依赖注入是什么呢，说起来非常简单就是系统帮你把依赖组装好，我们来举个简单例子</p><pre><code>class People { Hand hand;};</code></pre><p>上面是一个非常简单的类，Spring把这个类叫做Bean，这个People 的 Bean 依赖一个Hand的类，我们来看一下这个Hand类</p><pre><code>class Hand { Finger finger; int num};</code></pre><p>  上面的Hand又依赖一个Finger类，而且提供了一个属性：手的num（数目），假如你要使用这个People类，你得新建3个类，而且得把代码写死，而Spring就是通过xml或者注解来帮你把这些类自动创建，所以才叫依赖注入，其实原理也非常简单</p><p>为啥要提供这个功能呢，因为我们希望通过配置这些xml就能实现不同的xml来实现不同的功能类，而不用修改代码重新编译，你可以理解为就是代码是高度松耦合，我们可以提供很多相同接口的组件给用户用，用户用的时候只需要修改配置文件就能实现灵活组合不同模块的功能</p><p>我们知道对于一个HTTP服务器，我们希望调用这个接口方法之前能对用户发的东西做一个核验，就像拦截器一样，但是Java里面怎么实现呢，就是调用一个方法之前调用一个特定方法，我们有两种方法，第一种就是定死类名，在调用所有方法之前就调用这个东西，第二张就是重新继承这个方法，在调用父方法之前或者之后在调用我们想调用的方法</p><p>显然第一种太蠢了，我们得先判断这个方法不存在，第二种可以使用Java Proxy类来实现（当然有局限只能是接口，可以用动态生成的类比如Cglib来做），我们而且可以把那个想注入的方法也看作一个特殊的bean（默认在普通的bean之前就做好），这样最终我们把普通的bean使用IoC容器给初始化，然后在用代理类把这个bean继承出来</p><p>这样我们就实现了一个高度控制的类方法，而Spring最主要就是要组装一个Servlet类来处理不同路径下面的请求，网络处理那些事情都交给Tomcat来处理了，所以其实Spring的职责也很简单，就是组装，最后根据组装模块来响应Tomcat发过来的request，返回一个response,因为Spring需要生成很多类，而且假如你使用为了支持注解，Spring还得使用反射来获取所有类的注解，反射速度也是非常慢的，所有Spring启动一般需要一点时间，甚至比其他框架比如Python还要慢，不过这些类的生成都是一次性的（不是单例除外），生成完之后就可以直接使用这些生成好的类的方法来响应Tomcat请求了</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://github.com/code4craft/tiny-spring/blob/master/changelog.md" target="_blank" rel="noopener">https://github.com/code4craft/tiny-spring/blob/master/changelog.md</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Spring核心就是IoC（依赖注入）AoP（面向切面）本篇就基于一个开源项目 tiny-spring 来分析Spring框架到底给我们提供了什么东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;依赖注入是什么呢，说起来非常简单就是系统帮你把依赖组装
      
    
    </summary>
    
      <category term="Java" scheme="https://mrzhangboss.github.io/categories/Java/"/>
    
    
      <category term="SpringBoot" scheme="https://mrzhangboss.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>浅析微服务</title>
    <link href="https://mrzhangboss.github.io/2021/01/07/java/%E6%B5%85%E6%9E%90%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <id>https://mrzhangboss.github.io/2021/01/07/java/浅析微服务/</id>
    <published>2021-01-06T16:00:00.000Z</published>
    <updated>2021-03-09T12:02:26.477Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇博客主要是从web技术发展来探索微服务的起源</p></blockquote><p>要想了解微服务是什么得从web框架出来之后开始讲起，大部分可能不知道微服务，一定知道写web服务的框架，懂Java的可以用Spring Boot一把梭，懂Python的Flask、Django、Tornado也写的飞起</p><p>微服务也就是在这些框架出来后才慢慢出现的，首先我们就不谈MVC模式的兴起（主要就是把前端和后端解耦合），我们谈谈在MVC后要面临的问题</p><p>第一个就是接口越来越多，用户也越来越多，面临的第一个问题就是某些接口请求非常频繁，面临第二个问题就是某些接口我想升级怎么办，我们知道使用上面那些框架你要是想修改接口得把代码重新发布一下，然而线上就得暂停服务一会等服务升级</p><p>针对上面的问题，就开启了微服务的热潮，解决方法和MVC一样，我们把后端和后端进行解耦合，一个后端系统专门负责认证，一个后端系统专门负责订单，两者之间使用token来确认同一个用户，登录的请求接口不是很频繁，就用2台机子，订单非常频繁双十一的时候还会爆炸，就用10台机子，实现上非常简单，就是把在每台机子上面启动单独后端程序，再使用nginx作为负载均衡这样流量就均匀的打到每台机子上面去了，这样不管你是用Java还是Python都OK</p><p>这种解决方案能扛起很高的并发，但是还是有个问题，升级起来非常麻烦，要是想升级系统，得把每台机子的后端程序单独升级，管理起来非常麻烦</p><p>然后大家开始研究，大家把接口抽象起来，其实作为用户来说，他只是想调这个接口，能不能使用一个中间层把用户想调的接口和后端真正的提供的服务连接起来，这个就是中间件兴起的源头</p><p>让我们想想中间件的职责是什么，其实想想也很简单就是一个后端接口管理系统，能够实现注册接口的功能，并且打通接口和后端的接口，当然说起来简单，但是要实现一个高可用的中间件也是不容易的，具体可以去看看Spring Cloud、Dubbo这些中间件框架</p><p>我们想想这些中间件框架优缺点，优点也很明确，就是性能非常强，每个小模块只负责自己的接口，当业务量大起来的时候能迅速启动上万个进程来分流大流量，但是缺点也有就是只限定了自己的编程语言（Spring Cloud和Dobbo这些只能用Java写），而且随着接口越来越多，管理也越来越麻烦，调用链也越来越长了，有的时候你想加一个接口得涉及很多道调用链，先去请求用户信息，再去查询用户银行卡信息，再去查询商品信息，虽然分模块很爽，但是有些东西越分越累，模块越来越多，实现功能也越来越散</p><p>模块越来越多带来的一个副作用是测试调试越来越难了，而且随着摩尔定律，我们现在的内存越来越大了、CPU也越来越多了，以前写微服务为的就是省点内存，现在大家发现其实他也没有那么省内存，为了保证服务高可用，我们得用上百台机器来搭一个集群，但是大部分时间，业务量没有那么大，其实大部分时间那么大内存都放在那里浪费了，而且当业务量万一突然起来了，然而固定集群却没法承受这么大流量</p><p>后面随着Docker、K8S的兴起，大家慢慢的发现容器化能够解决上面的问题，当业务量小的时候启动少量容器，业务量大的时候启动多一点容器，而且可以实现动态扩容，所以这时候提出了一个Service Mesh模式</p><p>什么是Service Mesh，其实就是我们前面提到的nginx的负载均衡方案类似，就是使用一个nginx来把请求打在后端上面，但是不同点在于，原来nginx是写死在配置里面的，现在k8s里面的nginx（目前主流的方案是Istio）把接过来的请求打到容器网络上面去，而且当流量大的时候会自动新建新的实例来负载新的请求</p><p>兜兜转转我们又回到了最初的样子，你也不用学习什么后端中间件使用，你只要会写一个提供web接口的服务，打包成个容器，在k8s配置一下，轻轻松松就能扛着上千万并发，扛不住加实例就够了</p><p>现在我们来谈谈Service Mesh的原理，其实很简单，就是蚁群的思想，每一个容器都是一只小蚂蚁，功能齐全啥都能干，一只蚂蚁搬不动一座大山，但是上亿只蚂蚁可以搬的起，Service Mesh的思想有点像大数据分而治之的理论，当你的容器能服务1千人，那你1万个容器就能服务1亿个人，所以对于开发者来说，你只需要写好一个能服务1千个人的小web，你不需要去考虑当你要服务1万个人的时候，代码需要怎么改动，对于开发者来说，测试和开发都变得异常轻松，自己也不用去写原来的Dubbo那种大体量代码，你所有的接口都在一个项目中，测试开发都变得异常轻松，而且你也不用思考怎么使用Java调用Python的机器学习框架等等，你可以用Python写，用Go写，甚至可以用C来写，容器不在拘束于语言，你只要能对外提供服务就好了</p><p>总之在K8S容器化兴起之后，我们也不用再怎么思考如何解耦合代码，套上各种中间件把我们各个接口都打散，实现一套高并发系统，我们只需要写一个网站，能服务上千的用户，当我们业务量大起来的时候交给K8S，让它帮我们启动上万个相同网站，把流量给消化掉，所以在一定的程度上，在现在技术发展下，高并发的门槛越来越低，原来一个高并发专家得学会好多框架，dubbo各种组件，现在随便叫来一个小白随便把它从网上复制的代码拷拷，搭起来一个小网站，放到K8S上面，马上就可以服务上千万甚至上亿用户</p><p>所以说技术发展真的是快啊，记得以前一个架构师的道路是慢慢从学习各种nginx负载均衡Redis集群搭建，搭建起一套复杂的系统，你得去学习各种组件使用，现在呢，一个小白，网上拷拷代码，使用上内存作为缓存，使用MySQL当数据库，并发也就上个千，然后数据库配置一下把内存换成redis，MySQL换成Kudu，放进K8S里面并发就能上千万，高并发问题就解决了，原来一个百万年薪才能做的高并发技术专家在新的技术降纬打击下一个月薪1万的菜鸟也能搞定了</p><p>总而言之，高并发随着技术发展会越来越简单，微服务的提出有人说就是干掉架构师，所以有时候也会想，随着技术的发展，是不是不会有工程师这个职位了，的确技术在不断发展，但是只要抱着一个不断学习的心也就不怕了，技术不断推成出新，但是本质是不变的，所以也不用害怕。</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://philcalcado.com/2017/08/03/pattern_service_mesh.html" target="_blank" rel="noopener">https://philcalcado.com/2017/08/03/pattern_service_mesh.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这篇博客主要是从web技术发展来探索微服务的起源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要想了解微服务是什么得从web框架出来之后开始讲起，大部分可能不知道微服务，一定知道写web服务的框架，懂Java的可以用Spring Boot一把梭，懂P
      
    
    </summary>
    
      <category term="Java" scheme="https://mrzhangboss.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
