<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on 阿伦博客</title><link>https://mrzhangboss.github.io/tags/java/</link><description>Recent content in Java on 阿伦博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 2024 阿伦</copyright><lastBuildDate>Sat, 02 Jul 2022 23:22:46 +0000</lastBuildDate><atom:link href="https://mrzhangboss.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>秒杀系统的思考</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/</link><pubDate>Sat, 02 Jul 2022 23:22:46 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/</guid><description>秒杀系统</description></item><item><title>RPC大纲</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/rpc/rpc%E5%A4%A7%E7%BA%B2/</link><pubDate>Sat, 19 Mar 2022 15:54:05 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/rpc/rpc%E5%A4%A7%E7%BA%B2/</guid><description>最近想系统学一下RPC框架，下面是我学习路径</description></item><item><title>IO总结</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/io%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 19 Feb 2022 11:21:52 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/io%E6%80%BB%E7%BB%93/</guid><description>&lt;blockquote>
&lt;p>最近被NIO这个概念弄得有点晕，一会是Linux的NIO一会是Java 的NewIO也叫NIO，然后Linux又有一个AIO的概念，但是Java里面好像没有，所以就好好理理IO到底是个啥东西&lt;/p></description></item><item><title>Bean复制真的那么慢吗</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/bean%E5%A4%8D%E5%88%B6%E7%9C%9F%E7%9A%84%E9%82%A3%E4%B9%88%E6%85%A2%E5%90%97/</link><pubDate>Mon, 17 Jan 2022 21:16:12 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/bean%E5%A4%8D%E5%88%B6%E7%9C%9F%E7%9A%84%E9%82%A3%E4%B9%88%E6%85%A2%E5%90%97/</guid><description>&lt;h2 class="relative group">引言
&lt;div id="%E5%BC%95%E8%A8%80" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E8%A8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>最近在业务代码中经常用到的BeanUtils.copyProperties，有的时候在想，这个东西在Java里面真方便，但是性能怎么样呢，然后找了一篇博文
&lt;a href="https://www.cnblogs.com/kancy/p/12089126.html" target="_blank">https://www.cnblogs.com/kancy/p/12089126.html&lt;/a>&lt;/p></description></item><item><title>泛型的前世今生</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</link><pubDate>Fri, 10 Dec 2021 20:35:08 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</guid><description>&lt;h2 class="relative group">一、什么是泛型
&lt;div id="%E4%B8%80%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%9B%E5%9E%8B" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E4%B8%80%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%9B%E5%9E%8B" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;h2 class="relative group">二、泛型的作用是什么
&lt;div id="%E4%BA%8C%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E4%BA%8C%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;h2 class="relative group">
&lt;div id="heading" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#heading" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2></description></item><item><title>SPI破坏了双亲委派吗</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/spi%E7%A0%B4%E5%9D%8F%E4%BA%86%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E5%90%97/</link><pubDate>Thu, 09 Dec 2021 20:32:50 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/spi%E7%A0%B4%E5%9D%8F%E4%BA%86%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E5%90%97/</guid><description>&lt;blockquote>
&lt;p>最近在学JVM的时候，把ClassLoader部分给过了一遍，谈到ClassLoader少不了双亲委派，谈到双亲委派少不了说破坏双亲委派的SPI，也看到了知乎上一些&lt;a href="https://www.zhihu.com/question/49667892/answer/690288611" target="_blank">观点&lt;/a> ，这个时候我就疑惑了，有两个问题围绕在我头上，什么是双亲委派，为什么说SPI破坏了双亲委派，这篇博客就从源码出发，讲一讲我的理解&lt;/p></description></item><item><title>AOP再思考</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/aop%E5%86%8D%E6%80%9D%E8%80%83/</link><pubDate>Wed, 08 Dec 2021 18:30:18 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/aop%E5%86%8D%E6%80%9D%E8%80%83/</guid><description>&lt;blockquote>
&lt;p>我记得之前写过Spring AOP相关的文章，但是最近在观看Cat源代码的时候发现 @Aspect 这个注解与AspectJ这个项目，查阅了不少博客，感觉还是云里雾里，这篇博客就是基于博客以及自己实际实验与测试搞懂 Spring AOP和 AspectJ之间的关系&lt;/p></description></item><item><title>JVM之ClassLoader的思考</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/jvm/jvm%E4%B9%8Bclassloader%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Sat, 30 Oct 2021 15:24:45 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/jvm/jvm%E4%B9%8Bclassloader%E7%9A%84%E6%80%9D%E8%80%83/</guid><description/></item><item><title>压测卡顿20秒引发的思考</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/%E5%8E%8B%E6%B5%8B%E5%8D%A1%E9%A1%BF20%E7%A7%92%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Sat, 23 Oct 2021 17:00:14 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/%E5%8E%8B%E6%B5%8B%E5%8D%A1%E9%A1%BF20%E7%A7%92%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>&lt;blockquote>
&lt;p>压测让人爆炸的事，就算把你写的代码都注释掉了这个问题依旧存在，这个时候你开始怀疑网络，怀疑TCP链接，怀疑系统框架，这篇文章就线上遇到的问题好好梳理了一下一个请求进来究竟会“遭遇”什么&lt;/p></description></item><item><title>压测心得</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/%E5%8E%8B%E6%B5%8B%E5%BF%83%E5%BE%97/</link><pubDate>Sun, 10 Oct 2021 16:47:06 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/%E5%8E%8B%E6%B5%8B%E5%BF%83%E5%BE%97/</guid><description>&lt;blockquote>
&lt;p>最近在做一个接口的压测，一开始以为自己优化后的代码应该没得问题，没想到中途遇到不少问题&lt;/p></description></item><item><title>LinkedHashMap实现LRU</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/linkedhashmap%E5%AE%9E%E7%8E%B0lru/</link><pubDate>Sun, 19 Sep 2021 18:28:11 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/linkedhashmap%E5%AE%9E%E7%8E%B0lru/</guid><description>&lt;h2 class="relative group">引用
&lt;div id="%E5%BC%95%E7%94%A8" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E7%94%A8" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/62322204" target="_blank">https://zhuanlan.zhihu.com/p/62322204&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.tencent.com/developer/article/1519813" target="_blank">https://cloud.tencent.com/developer/article/1519813&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>FlatMap用法</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/stream/flatmap%E7%94%A8%E6%B3%95/</link><pubDate>Sun, 20 Jun 2021 18:59:20 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/stream/flatmap%E7%94%A8%E6%B3%95/</guid><description/></item><item><title>Stream源码（2）：从问题出发看源码</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/stream/%E4%BB%8E%E9%97%AE%E9%A2%98%E5%87%BA%E5%8F%91%E7%9C%8B%E6%BA%90%E7%A0%81/</link><pubDate>Sun, 23 May 2021 09:48:54 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/stream/%E4%BB%8E%E9%97%AE%E9%A2%98%E5%87%BA%E5%8F%91%E7%9C%8B%E6%BA%90%E7%A0%81/</guid><description>&lt;blockquote>
&lt;p>之前看一些开源项目源码的时候，发现一个问题，假如你贪全，一口气把整个代码看完，由于现在程序架构
比较复杂，很多功能被分成很多个组件来完成，有的时候你会被程序跳来跳去给弄晕，假如你但看一个小功能，你又
不知道为啥要用这个&lt;/p></description></item><item><title>Stream源码（1）：如何实现去重</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/stream/%E4%BB%8E%E5%8E%BB%E9%87%8D%E5%88%B0stream%E6%BA%90%E7%A0%81/</link><pubDate>Sat, 15 May 2021 22:48:20 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/stream/%E4%BB%8E%E5%8E%BB%E9%87%8D%E5%88%B0stream%E6%BA%90%E7%A0%81/</guid><description>&lt;blockquote>
&lt;p>本篇博客是在看代码的时候看到使用Java8使用&lt;code>Stream&lt;/code>去重的妙用，从而对Java如何使用Stream实现几行代码
完成一个可支持并行化的流式计算程序&lt;/p></description></item><item><title>Dubbo浅探</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/dubbo/dubbo%E6%B5%85%E6%8E%A2/</link><pubDate>Sat, 27 Mar 2021 21:27:53 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/dubbo/dubbo%E6%B5%85%E6%8E%A2/</guid><description>&lt;blockquote>
&lt;p>繁忙的一周终于过去了，加入小影第一周主要是熟悉后端架构，同事们都挺好，自己的基础还是有点弱，前段时间简单的把Spring
Cloud 和 Dubbo学习了一下，但是其实对于工作来说，之前学的都是最新的版本，但是其实公司用的版本很老了，所以需要时间去学习老版本&lt;/p></description></item><item><title>Spring Cloud Alibaba浅探</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/springboot/springcloudalibaba%E6%B5%85%E6%8E%A2/</link><pubDate>Tue, 16 Mar 2021 20:05:53 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/springboot/springcloudalibaba%E6%B5%85%E6%8E%A2/</guid><description>&lt;blockquote>
&lt;p>花了半天时间把Spring Cloud Alibaba 的&lt;code>Nacos&lt;/code> 、 &lt;code>Sentinel&lt;/code> 和 &lt;code>Seata&lt;/code>简单的使用了一下，下面是我的一些看法&lt;/p></description></item><item><title>SpringCloud浅析</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/springboot/springcloud%E6%B5%85%E6%9E%90/</link><pubDate>Sun, 14 Mar 2021 08:38:19 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/springboot/springcloud%E6%B5%85%E6%9E%90/</guid><description>&lt;blockquote>
&lt;p>最近在学SpringCloud，之前一直对用视频学嗤之以鼻，觉得只有弱者才会这样，但是其实对于一些已经非常常见的技术
比如SpringCloud这种，已经出来很长一段时间了，而且其实非常杂，用视频学起来其实非常快，当然前提是你要三倍速播放，而且
你得把视频配套的代码找到，这样你就能很快的掌握这个。&lt;/p></description></item><item><title>浅析Spring</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/springboot/%E6%B5%85%E6%9E%90spring/</link><pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/springboot/%E6%B5%85%E6%9E%90spring/</guid><description>&lt;p> &amp;gt; Spring核心就是IoC（依赖注入）AoP（面向切面）本篇就基于一个开源项目 tiny-spring 来分析Spring框架到底给我们提供了什么东西&lt;/p></description></item><item><title>浅析微服务</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/%E6%B5%85%E6%9E%90%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/%E6%B5%85%E6%9E%90%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid><description>&lt;blockquote>
&lt;p>这篇博客主要是从web技术发展来探索微服务的起源&lt;/p>
&lt;/blockquote>
&lt;p>要想了解微服务是什么得从web框架出来之后开始讲起，大部分可能不知道微服务，一定知道写web服务的框架，懂Java的可以用Spring Boot一把梭，懂Python的Flask、Django、Tornado也写的飞起&lt;/p></description></item><item><title>如何在Ubuntu上发布Scala Jar包到Maven中央仓库</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/%E5%A6%82%E4%BD%95%E5%9C%A8ubuntu%E4%B8%8A%E5%8F%91%E5%B8%83scalajar%E5%8C%85%E5%88%B0maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/%E5%A6%82%E4%BD%95%E5%9C%A8ubuntu%E4%B8%8A%E5%8F%91%E5%B8%83scalajar%E5%8C%85%E5%88%B0maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</guid><description>&lt;blockquote>
&lt;p>由于网上的教程大多数是&lt;code>Windows&lt;/code>下的，而且都是介绍怎么打包&lt;code>Java&lt;/code>的&lt;code>Jar&lt;/code>包，关于&lt;code>Scala&lt;/code>相关的比较少，因此我踩了不少坑才成功的把包发布到&lt;code>Maven&lt;/code>中央仓库，你们可以才中央仓库里面搜到&lt;a href="https://search.maven.org/artifact/me.zhanglun.ahocorasick/trie/1.0.5/jar" target="_blank">我的包&lt;/a>&lt;/p></description></item><item><title>Learning Scala From Java</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/learningscalafromjava/</link><pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/learningscalafromjava/</guid><description>&lt;blockquote>
&lt;p>Recently I had finshed reading one book : &amp;laquo; Scala for The Impatient&amp;raquo;, I found a lot intrest thing during reading this book.Cause I had known &lt;code>Python&lt;/code> and &lt;code>Java&lt;/code> before, I can see mixed fetures of &lt;code>Scala&lt;/code> between &lt;code>Python&lt;/code> and &lt;code>Java&lt;/code>.This blog is my thought of studying a new language from other learned language.&lt;/p></description></item><item><title>Java的char类型到底几个字节</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/java%E7%9A%84char%E7%B1%BB%E5%9E%8B%E5%88%B0%E5%BA%95%E5%87%A0%E4%B8%AA%E5%AD%97%E8%8A%82/</link><pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/java%E7%9A%84char%E7%B1%BB%E5%9E%8B%E5%88%B0%E5%BA%95%E5%87%A0%E4%B8%AA%E5%AD%97%E8%8A%82/</guid><description>&lt;h2 class="relative group">引言
&lt;div id="%E5%BC%95%E8%A8%80" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E8%A8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>之所以有这个疑问，是上次阅读Java基础书时碰到讲解&lt;code>char&lt;/code>类型没有看明白，并且在代码验证过程中错误的理解了代码的意思，导致我对这么个简单问题产生疑惑并且“恶意揣测”Java内部的黑魔法，这里就把我如何走上歪路，并且最终找到“正确”的道路的故事讲出来&lt;/p></description></item><item><title>从例子里解Spring IOC</title><link>https://mrzhangboss.github.io/posts/backend/framework/java/springboot/%E4%BB%8E%E4%BE%8B%E5%AD%90%E9%87%8C%E8%A7%A3springioc/</link><pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/backend/framework/java/springboot/%E4%BB%8E%E4%BE%8B%E5%AD%90%E9%87%8C%E8%A7%A3springioc/</guid><description>&lt;h2 class="relative group">Spring的IOC理解
&lt;div id="spring%E7%9A%84ioc%E7%90%86%E8%A7%A3" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#spring%E7%9A%84ioc%E7%90%86%E8%A7%A3" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;h2 class="relative group">什么是IOC
&lt;div id="%E4%BB%80%E4%B9%88%E6%98%AFioc" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E4%BB%80%E4%B9%88%E6%98%AFioc" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>在这里我们不谈Spring的基础知识,我们知道谈到Spring就会谈到IOC,这个IOC是什么呢,中文名叫控制反转，这个东西是伴随着一些编程思想出现,其实同Java的本身也有关&lt;/p></description></item></channel></rss>