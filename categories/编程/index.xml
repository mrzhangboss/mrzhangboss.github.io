<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编程 on 阿伦博客</title><link>https://mrzhangboss.github.io/categories/%E7%BC%96%E7%A8%8B/</link><description>Recent content in 编程 on 阿伦博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 2024 阿伦</copyright><lastBuildDate>Sun, 17 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://mrzhangboss.github.io/categories/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>重构-总结</title><link>https://mrzhangboss.github.io/posts/essays/programming/book/%E9%87%8D%E6%9E%84-%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/book/%E9%87%8D%E6%9E%84-%E6%80%BB%E7%BB%93/</guid><description>&lt;p>
&lt;figure>
&lt;img class="my-0 rounded-md" loading="lazy" src="https://mrzhangboss.github.io/images/%E9%87%8D%E6%9E%84-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="重构思维导图" />
&lt;/figure>
&lt;/p></description></item><item><title>代码整洁之道-总结</title><link>https://mrzhangboss.github.io/posts/essays/programming/book/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93-%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/book/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93-%E6%80%BB%E7%BB%93/</guid><description>&lt;blockquote>
&lt;p>很早就听说过思维导图，但是怎么去画，怎么让它帮助你去学习，我以前不得其道，以为就像记老师讲的笔记一样，尝试几次后感觉无用就弃之高阁了，这次在知乎上看到一篇回答感觉很是在理，就实践了一番&lt;/p></description></item><item><title>用户空间隔离</title><link>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E9%9A%94%E7%A6%BB/</link><pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E9%9A%94%E7%A6%BB/</guid><description>&lt;blockquote>
&lt;p>通过前面的学习我们知道，在前两个实验中最主要的程序就是&lt;code>kern/init.c&lt;/code>文件中&lt;code>i386_init&lt;/code>函数，但是我们看到最后却是一个&lt;code>while&lt;/code>循环结束。&lt;/p></description></item><item><title>KERNBASE对操作系统的影响</title><link>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/kernbase%E5%AF%B9%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BD%B1%E5%93%8D/</link><pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/kernbase%E5%AF%B9%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BD%B1%E5%93%8D/</guid><description>&lt;h2 class="relative group">概括
&lt;div id="%E6%A6%82%E6%8B%AC" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E6%A6%82%E6%8B%AC" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;blockquote>
&lt;p>这个问题主要在这本&lt;a href="https://pdos.csail.mit.edu/6.828/2016/xv6/book-rev9.pdf" target="_blank">xv6-ref&lt;/a>的第一章的练习题2中提出来&lt;/p></description></item><item><title>内存分页设计</title><link>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E8%AE%BE%E8%AE%A1/</link><pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E8%AE%BE%E8%AE%A1/</guid><description>&lt;h2 class="relative group">引言
&lt;div id="%E5%BC%95%E8%A8%80" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E8%A8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>前面已经通过lab1的这篇&lt;a href="https://mrzhangboss.github.io/2018/01/03/%e5%86%85%e5%ad%98%e5%88%86%e9%a1%b5%e8%ae%be%e8%ae%a1/">博文&lt;/a>了解了内存分页的实现细节，接下来就谈谈如何具体实现内存分页&lt;/p></description></item><item><title>内存分页</title><link>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5/</link><pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5/</guid><description>&lt;h2 class="relative group">引言
&lt;div id="%E5%BC%95%E8%A8%80" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E8%A8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>本来自己查了很多资料，想自己写出来，结果下笔的时候发现别人已经把我想写的部分全部写出来了，而且比我想的还要具体，所以我就不写了，把链接放出了，顺便我补充一些&lt;/p></description></item><item><title>引导和操作系统的交互</title><link>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E5%BC%95%E5%AF%BC%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%A4%E4%BA%92/</link><pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E5%BC%95%E5%AF%BC%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%A4%E4%BA%92/</guid><description>&lt;h2 class="relative group">引言
&lt;div id="%E5%BC%95%E8%A8%80" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E8%A8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>本来自己查了很多资料，想自己写出来，结果下笔的时候发现别人已经把我想写的部分全部写出来了，而且比我想的还要具体，所以我就不写了，把链接放出了，顺便我补充一些&lt;/p></description></item><item><title>从CS寄存器看段的前世今生</title><link>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E4%BB%8Ecs%E5%AF%84%E5%AD%98%E5%99%A8%E7%9C%8B%E6%AE%B5%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</link><pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E4%BB%8Ecs%E5%AF%84%E5%AD%98%E5%99%A8%E7%9C%8B%E6%AE%B5%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</guid><description>&lt;h2 class="relative group">引言
&lt;div id="%E5%BC%95%E8%A8%80" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E8%A8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>Intel作为作为微处理器的航头老大，一直引导CPU的进步发展，也正是因为Intel是一个有着历史包袱的企业，所以站在现代CPU看起来，有一些非常奇葩的设计遗留下来，这些设计一开始是为了兼容，慢慢的将这种兼容又发展成新的功能，把“包袱”转换成“亮点”，段设计就是其中的一个很重要的代表，要想搞懂这个设计在不同的CPU的如何保持兼容和强化，我们必须要慢慢的把CPU的历史给捋顺。&lt;/p></description></item><item><title>什么是操作系统</title><link>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E4%BB%80%E4%B9%88%E6%98%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/%E4%BB%80%E4%B9%88%E6%98%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description>&lt;h2 class="relative group">引言
&lt;div id="%E5%BC%95%E8%A8%80" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E8%A8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>本文是基于mit6.828 的lab1对操作系统的思考，网上有不少关于lab1的博客，大部分都是介绍如何完成lab1的问题，介绍的比较详细的有这个&lt;a href="http://www.cnblogs.com/fatsheep9146/category/769143.html" target="_blank">博客&lt;/a>，在这里我就不从问题出发，建议大家看完上面的博客在看我这篇博文，我这篇博文就是从把我遇到的疑惑提炼出知识点，然后再把这些知识点串起来&lt;/p></description></item><item><title>mit6.828课程总结</title><link>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/mit6.828%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/mit6_828/mit6.828%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/</guid><description>&lt;h2 class="relative group">引言
&lt;div id="%E5%BC%95%E8%A8%80" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E8%A8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;blockquote>
&lt;p>一开始想直接做一个操作系统，但是万事开头难，学习操作系统需要太多基础知识了，所以就按照网上推荐先学习mit6.828的课程，先把xvf6操作系统搞懂，然后在来实现自己的操作系统，下面就是学习这个课程的体会，按照各个lab的顺序，介绍自己的心得体会&lt;/p></description></item><item><title>红黑树实现原理</title><link>https://mrzhangboss.github.io/posts/essays/programming/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link><pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid><description>&lt;blockquote>
&lt;p>本篇博客主要基于这篇&lt;a href="https://mrzhangboss.github.io/">博客&lt;/a>的扩展，建议阅读前先阅读这篇博文，这篇博文详细介绍红黑树的实现原理，完整代码在&lt;a href="https://github.com/mrzhangboss/trees" target="_blank">github&lt;/a>的&lt;code>rbtree.go&lt;/code>文件中&lt;/p></description></item><item><title>AVL树实现原理</title><link>https://mrzhangboss.github.io/posts/essays/programming/avl%E6%A0%91%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/avl%E6%A0%91%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid><description>&lt;blockquote>
&lt;p>本篇博客主要基于这篇&lt;a href="https://mrzhangboss.github.io/2017/12/27/%e6%b5%85%e8%b0%88%e6%a0%91%e8%bf%99%e7%a7%8d%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84/">博客&lt;/a>的扩展，建议阅读前先阅读这篇博文，这篇博文详细介绍AVL树的实现原理，完整代码在&lt;a href="https://github.com/mrzhangboss/trees" target="_blank">github&lt;/a>的&lt;code>avl.go&lt;/code>文件中&lt;/p></description></item><item><title>二叉搜索树实现原理</title><link>https://mrzhangboss.github.io/posts/essays/programming/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid><description>&lt;blockquote>
&lt;p>本篇博客主要基于这篇&lt;a href="">博客&lt;/a>的扩展，建议阅读前先阅读这篇&lt;a href="https://mrzhangboss.github.io/2017/12/27/%e6%b5%85%e8%b0%88%e6%a0%91%e8%bf%99%e7%a7%8d%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84/">博文&lt;/a>，这篇博文详细介绍二叉搜索树的实现原理，完整代码在&lt;a href="https://github.com/mrzhangboss/trees" target="_blank">github&lt;/a>的&lt;code>binary.go&lt;/code>文件中&lt;/p></description></item><item><title>浅谈"树"这种数据结构</title><link>https://mrzhangboss.github.io/posts/essays/programming/%E6%B5%85%E8%B0%88%E6%A0%91%E8%BF%99%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Wed, 27 Dec 2017 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/%E6%B5%85%E8%B0%88%E6%A0%91%E8%BF%99%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>&lt;blockquote>
&lt;p>一直以来我对树这种数据结构就比较头疼，随便找一个红黑树的博客，大部分都是在谈怎么旋转怎么插入怎么删除，将算法讲的头头是道，但是就算你看懂了也不懂为什么要这样做，所以我们这篇博文就从可视化的角度，慢慢的介绍这些树的来世今生。&lt;/p></description></item><item><title>几个有趣的动态规划</title><link>https://mrzhangboss.github.io/posts/essays/programming/%E5%87%A0%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/%E5%87%A0%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>&lt;blockquote>
&lt;p>这篇博文是&lt;a href="https://mrzhangboss.github.io/2017/12/25/%e4%bb%8e%e9%97%ae%e9%a2%98%e7%90%86%e8%a7%a3%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92/">从问题理解动态规划&lt;/a>的练习篇，通过几个动态规划的问题剖析进一步理解动态规划&lt;/p></description></item><item><title>从问题理解动态规划</title><link>https://mrzhangboss.github.io/posts/essays/programming/%E4%BB%8E%E9%97%AE%E9%A2%98%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/%E4%BB%8E%E9%97%AE%E9%A2%98%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>&lt;blockquote>
&lt;p>网上关于动态规划的资料，大部分直接给结论，所以一开始我一头雾水，搞不懂为什么要这么做，这篇博文就从实际问题出发，简单的剖析动态规划&lt;/p></description></item><item><title>漫谈排序算法</title><link>https://mrzhangboss.github.io/posts/essays/programming/%E6%BC%AB%E8%B0%88%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link><pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/%E6%BC%AB%E8%B0%88%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid><description>&lt;h1 class="relative group">0x00 引子
&lt;div id="0x00-%E5%BC%95%E5%AD%90" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#0x00-%E5%BC%95%E5%AD%90" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;blockquote>
&lt;p>排序是很多算法的基础，简简单单的排序前人就归纳出很多种算法，但是这些算法多多少少都有着相同的原理&lt;/p></description></item><item><title>怎么成为数据科学家（翻译）</title><link>https://mrzhangboss.github.io/posts/essays/programming/book/how-to-be-data-scientist/</link><pubDate>Fri, 23 Dec 2016 22:05:56 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/book/how-to-be-data-scientist/</guid><description>&lt;blockquote>
&lt;p>这是我从&lt;code>Quora&lt;/code>上看到的一篇非常简短但详细的数据科学家的‘技能点’
来自eBay的一个数据科学家的回答
翻译来自&lt;a href="https://www.quora.com/How-do-I-become-Data-analyst-scientist-Do-I-need-to-have-good-programming-skills/answer/Paul-Jeon-3?srid=ue3s8" target="_blank">Quora回答&lt;/a>&lt;/p></description></item><item><title>刷题笔记</title><link>https://mrzhangboss.github.io/posts/essays/programming/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 21 Aug 2016 20:26:34 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</guid><description>&lt;blockquote>
&lt;p>在牛客网刷了16道题了,在这做个总结&lt;/p>
&lt;/blockquote>
&lt;h2 class="relative group">概况
&lt;div id="%E6%A6%82%E5%86%B5" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E6%A6%82%E5%86%B5" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>编程题无非两种一种考算法,一种考数据结构&lt;/p></description></item><item><title>用例子学TDD</title><link>https://mrzhangboss.github.io/posts/essays/programming/tdd/tdd-byexample-transform/</link><pubDate>Sun, 21 Aug 2016 09:14:18 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/tdd/tdd-byexample-transform/</guid><description>&lt;blockquote>
&lt;p>翻译自&lt;strong>TDD-byexample&lt;/strong>
作者&lt;strong>Kent Beck, Three Rivers Institute&lt;/strong>
有删减&lt;/p></description></item><item><title>TDD-隔离测试</title><link>https://mrzhangboss.github.io/posts/essays/programming/tdd/tdd-isolution-test/</link><pubDate>Tue, 09 Aug 2016 18:02:56 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/tdd/tdd-isolution-test/</guid><description>&lt;blockquote>
&lt;p>隔离测试是相对与于整合测试来说的，现代软件架构流行分层式、模块化，而隔离测试就是相当于在每层上进行测试，整合测试就是跨越多个层进行测试&lt;/p></description></item><item><title>TDD测试开发理解</title><link>https://mrzhangboss.github.io/posts/essays/programming/tdd/tdd%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E7%90%86%E8%A7%A3/</link><pubDate>Tue, 26 Jul 2016 22:48:12 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/tdd/tdd%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E7%90%86%E8%A7%A3/</guid><description>&lt;blockquote>
&lt;p>看了 &amp;laquo; Python Web 开发 测试驱动方法&amp;raquo; 以后, 感觉自己找到自己的一些项目之所以不能够很好的 维护下去的原因.总结了一下自己的理解, 记录下来.&lt;/p></description></item><item><title>js的this引发的思考</title><link>https://mrzhangboss.github.io/posts/essays/programming/js%E7%9A%84this%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Wed, 20 Jul 2016 23:01:02 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/js%E7%9A%84this%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>&lt;blockquote>
&lt;p>最近这几天在开发一个hmtl5的游戏, 但是对于js怎么使用面对对象来编程有点困惑,查了一些资料
整理如下.&lt;/p></description></item><item><title>泛型继承的理解</title><link>https://mrzhangboss.github.io/posts/essays/programming/%E6%B3%9B%E5%9E%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3/</link><pubDate>Mon, 18 Jul 2016 16:07:36 +0000</pubDate><guid>https://mrzhangboss.github.io/posts/essays/programming/%E6%B3%9B%E5%9E%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3/</guid><description>&lt;h3 class="relative group">泛型对于解决面对对象编程的算法设计可以提高其运算速度，但是对于引用类型来说还是没什么差别，因为引用类型只是指针的地址的调用，简单来说泛型还是挺好理解的，但是对于泛型、非泛型、继承和接口的融合就有些迷惑了。
&lt;div id="%E6%B3%9B%E5%9E%8B%E5%AF%B9%E4%BA%8E%E8%A7%A3%E5%86%B3%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E5%8F%AF%E4%BB%A5%E6%8F%90%E9%AB%98%E5%85%B6%E8%BF%90%E7%AE%97%E9%80%9F%E5%BA%A6%E4%BD%86%E6%98%AF%E5%AF%B9%E4%BA%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%AF%B4%E8%BF%98%E6%98%AF%E6%B2%A1%E4%BB%80%E4%B9%88%E5%B7%AE%E5%88%AB%E5%9B%A0%E4%B8%BA%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%8F%AA%E6%98%AF%E6%8C%87%E9%92%88%E7%9A%84%E5%9C%B0%E5%9D%80%E7%9A%84%E8%B0%83%E7%94%A8%E7%AE%80%E5%8D%95%E6%9D%A5%E8%AF%B4%E6%B3%9B%E5%9E%8B%E8%BF%98%E6%98%AF%E6%8C%BA%E5%A5%BD%E7%90%86%E8%A7%A3%E7%9A%84%E4%BD%86%E6%98%AF%E5%AF%B9%E4%BA%8E%E6%B3%9B%E5%9E%8B%E9%9D%9E%E6%B3%9B%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%9E%8D%E5%90%88%E5%B0%B1%E6%9C%89%E4%BA%9B%E8%BF%B7%E6%83%91%E4%BA%86" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E6%B3%9B%E5%9E%8B%E5%AF%B9%E4%BA%8E%E8%A7%A3%E5%86%B3%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E5%8F%AF%E4%BB%A5%E6%8F%90%E9%AB%98%E5%85%B6%E8%BF%90%E7%AE%97%E9%80%9F%E5%BA%A6%E4%BD%86%E6%98%AF%E5%AF%B9%E4%BA%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%AF%B4%E8%BF%98%E6%98%AF%E6%B2%A1%E4%BB%80%E4%B9%88%E5%B7%AE%E5%88%AB%E5%9B%A0%E4%B8%BA%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%8F%AA%E6%98%AF%E6%8C%87%E9%92%88%E7%9A%84%E5%9C%B0%E5%9D%80%E7%9A%84%E8%B0%83%E7%94%A8%E7%AE%80%E5%8D%95%E6%9D%A5%E8%AF%B4%E6%B3%9B%E5%9E%8B%E8%BF%98%E6%98%AF%E6%8C%BA%E5%A5%BD%E7%90%86%E8%A7%A3%E7%9A%84%E4%BD%86%E6%98%AF%E5%AF%B9%E4%BA%8E%E6%B3%9B%E5%9E%8B%E9%9D%9E%E6%B3%9B%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%9E%8D%E5%90%88%E5%B0%B1%E6%9C%89%E4%BA%9B%E8%BF%B7%E6%83%91%E4%BA%86" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;h5 class="relative group">比如说这种接口
&lt;div id="%E6%AF%94%E5%A6%82%E8%AF%B4%E8%BF%99%E7%A7%8D%E6%8E%A5%E5%8F%A3" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E6%AF%94%E5%A6%82%E8%AF%B4%E8%BF%99%E7%A7%8D%E6%8E%A5%E5%8F%A3" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h5>
&lt;pre>&lt;code> public interface IEnumeratot&amp;lt;T&amp;gt;:IDisposable,IEnumerator,ICompare&amp;lt;T&amp;gt;
&lt;/code>&lt;/pr</description></item></channel></rss>